import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import api from "../services/api";

const PaymentSuccessPage: React.FC = () => {
    const [status, setStatus] = useState<"loading" | "succeeded" | "failed" | "error">("loading");
    const [debugInfo, setDebugInfo] = useState<any>(null);
    const navigate = useNavigate();

    useEffect(() => {
        const checkPaymentStatus = async () => {
            const params = new URLSearchParams(window.location.search);
            const paymentIdParam = params.get("paymentId");
            const orderIdParam = params.get("orderId");

            console.log("üì¶ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞");
            console.log("üîó URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", { paymentId: paymentIdParam, orderId: orderIdParam });

            let paymentId = paymentIdParam;

            try {
                // –ï—Å–ª–∏ paymentId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –ø–æ orderId
                if (!paymentId && orderIdParam) {
                    const lookupRes = await api.get(`/payments/by-order/${orderIdParam}`);
                    paymentId = lookupRes.data?.paymentId;
                    console.log("üì• –ü–æ–ª—É—á–µ–Ω paymentId –ø–æ orderId:", paymentId);
                }

                // –ï—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ—Ç paymentId ‚Äî –æ—à–∏–±–∫–∞
                if (!paymentId) {
                    console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å paymentId");
                    setStatus("error");
                    return;
                }

                const statusUrl = `/payments/status/${paymentId}`;
                console.log("üì§ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã:", statusUrl);

                const statusRes = await api.get(statusUrl);
                const result = statusRes.data;
                console.log("üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", result);

                setDebugInfo({ request: statusUrl, response: result });

                if (result.status === "succeeded" || result.paid === true) {
                    setStatus("succeeded");
                    setTimeout(() => navigate("/client"), 5000);
                } else {
                    setStatus("failed");
                }
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:", error);
                setStatus("error");
            }
        };

        checkPaymentStatus();
    }, [navigate]);

    return (
        <div className="payment-success-page" style={{ maxWidth: 600, margin: "0 auto", padding: "2rem", textAlign: "center" }}>
            {status === "loading" && <p>üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...</p>}

            {status === "succeeded" && (
                <>
                    <h2 style={{ color: "green" }}>‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</h2>
                    <p>–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω—É—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...</p>
                </>
            )}

            {status === "failed" && (
                <>
                    <h2 style={{ color: "orange" }}>‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω</h2>
                    <p>–ü–ª–∞—Ç—ë–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</p>
                </>
            )}

            {status === "error" && (
                <>
                    <h2 style={{ color: "red" }}>‚ùå –û—à–∏–±–∫–∞</h2>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</p>
                </>
            )}
        </div>
    );
};

export default PaymentSuccessPage;
