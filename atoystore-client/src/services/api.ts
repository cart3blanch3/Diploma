import axios from "axios";
import { getDeviceFingerprint } from "../utils/fingerprint";

const API_URL = "http://localhost:5062/api";

const api = axios.create({
    baseURL: API_URL,
    headers: { "Content-Type": "application/json" },
    withCredentials: true, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HttpOnly cookie
});

const isValidTokenFormat = (token: string | null) => {
    return token && token.split(".").length === 3;
};

// === Interceptor for adding accessToken to headers ===
api.interceptors.request.use(
    async (config) => {
        const accessToken = sessionStorage.getItem("accessToken");

        if (!isValidTokenFormat(accessToken)) {
            console.warn("‚ö†Ô∏è accessToken –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!");
            return config;
        }

        config.headers.Authorization = `Bearer ${accessToken}`;
        return config;
    },
    (error) => Promise.reject(error)
);

// === Interceptor for refreshing token on 401 ===
api.interceptors.response.use(
    (response) => response,
    async (error) => {
        const originalRequest = error.config;

        if (error.response?.status === 401 && !originalRequest._retry) {
            originalRequest._retry = true;

            try {
                const fingerprint = await getDeviceFingerprint();

                console.warn("üîÅ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /refresh-token...");

                const refreshResponse = await axios.post(
                    "http://localhost:5115/auth/refresh-token",
                    { fingerprint },
                    {
                        withCredentials: true,
                        headers: { "Content-Type": "application/json" },
                    }
                );

                const newAccessToken = refreshResponse.data.accessToken;
                sessionStorage.setItem("accessToken", newAccessToken);

                console.info("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω. –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞...");

                originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
                return axios(originalRequest);
            } catch (refreshError) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", refreshError);
                sessionStorage.removeItem("accessToken");
                window.location.href = "/auth"; // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            }
        }

        return Promise.reject(error);
    }
);

export default api;
